services:
  nodered:
    build:
      context: .
      dockerfile: Dockerfile.nodered
    volumes:
      - shared_data:/myapp/db/record  # データを共有するためのボリューム
    ports:
      - '127.0.0.1:1880:1880'  # Node-REDのポート
    command: ["node-red"]  # Node-REDを起動するコマンド
    ulimits:
      nofile:
        soft: 65536  # ソフトリミット
        hard: 65536  # ハードリミット

  db:
    image: postgres:14.2
    env_file: .env.production  # 環境変数を.env.productionファイルから読み込む
    ports:
      - '127.0.0.1:5432:5432'  # PostgreSQLのポート
    volumes:
      - postgresql-data:/var/lib/postgresql/data  # データを永続化するためのボリューム
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}  # 環境変数からパスワードを設定
    shm_size: '2gb'  # PostgreSQLのパフォーマンス向上のための共有メモリサイズ
    ulimits:
      nofile:
        soft: 65536  # ソフトリミット
        hard: 65536  # ハードリミット
    tty: true  # 仮想端末を有効にする
    stdin_open: true  # 標準入力をオープンにする
    networks:
      - app_network

  redis:
    image: redis:latest  # Redisの最新のDockerイメージ
    command: redis-server --appendonly yes  # データの永続化を有効にする
    volumes:
      - redis-data:/data  # データを永続化するためのボリューム
    networks:
      - app_network
    ulimits:
      nofile:
        soft: 65536  # ソフトリミット
        hard: 65536  # ハードリミット

  web:
    build:
      context: .
      dockerfile: Dockerfile.production.web  # WebアプリケーションのDockerfile
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec chmod +x bin/rails && npm run build:css && bundle exec rails s -p 3000 -b '0.0.0.0' -e production"  # サーバー起動前の準備と起動コマンド
    tty: true  # 仮想端末を有効にする
    stdin_open: true  # 標準入力をオープンにする
    env_file: .env.production  # 環境変数を.env.productionファイルから読み込む
    environment:
      - KEY_DERIVATION_SALT=${KEY_DERIVATION_SALT}  # 環境変数の設定
      - RAILS_SERVE_STATIC_FILES=true  # 静的ファイルをサーブする設定
      - RAILS_LOG_TO_STDOUT=true  # ログを標準出力に設定
    volumes:
      - .:/myapp:delegated  # アプリケーションコードをマウント
      - shared_data:/myapp/db/record  # データを共有するためのボリューム
      - storage-data:/myapp/storage  # ストレージデータを共有するためのボリューム
      - /myapp/node_modules  # node_modulesをマウント
      - /myapp/public/assets  # 公開アセットをマウント
      - /myapp/tmp  # 一時ファイル用のボリューム
    networks:
      - app_network
    expose:
      - '3000'
    depends_on:
      - db  # dbサービスに依存
      - redis  # redisサービスに依存

  sidekiq:
    build:
      context: .
      dockerfile: Dockerfile.production.web  # WebアプリケーションのDockerfile
    command: bundle exec sidekiq -e production  # Sidekiqの起動コマンド
    tty: true  # 仮想端末を有効にする
    stdin_open: true  # 標準入力をオープンにする
    env_file: .env.production  # 環境変数を.env.productionファイルから読み込む
    environment:
      - KEY_DERIVATION_SALT=${KEY_DERIVATION_SALT}  # 環境変数の設定
      - RAILS_LOG_TO_STDOUT=true  # ログを標準出力に設定
    volumes:
      - .:/myapp:delegated  # アプリケーションコードをマウント
      - shared_data:/myapp/db/record  # データを共有するためのボリューム
      - storage-data:/myapp/storage  # ストレージデータを共有するためのボリューム
      - /myapp/node_modules  # node_modulesをマウント
      - /myapp/public/assets  # 公開アセットをマウント
      - /myapp/tmp  # 一時ファイル用のボリューム
    networks:
      - app_network
    depends_on:
      - db  # dbサービスに依存
      - redis  # redisサービスに依存

  nginx:
    image: nginx:latest
    volumes:
      - /etc/nginx/sites-enabled/default:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app_network
    depends_on:
      - web

volumes:
  postgresql-data:  # PostgreSQLデータ用のボリューム
  shared_data:  # 共有データ用のボリューム
  storage-data:  # ストレージデータ用のボリューム
  redis-data:  # Redisデータ用のボリューム

networks:
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16  # Using a different subnet range
  default:
    driver: bridge